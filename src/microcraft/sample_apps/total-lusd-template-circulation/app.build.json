{
  "name": "total-lusd-template-circulation",
  "description": "Tracks LUSD circulation metrics and user balances with advanced features.",
  "components": [
    {
      "type": "text",
      "label": "Enter ERC20 Address",
      "id": "erc20AddressInput",
      "placement": "input"
    },
    {
      "type": "button",
      "label": "Fetch ERC20 Data",
      "id": "fetchERC20Data",
      "placement": "action",
      "code": "async function fetchERC20Data() {\n    try {\n        // mcLib is injected by the framework.\n        const contractAddress = data.erc20AddressInput || mcLib.contracts.ERC20._address;\n        const abi = mcLib.contracts.ERC20.abi;\n\n        // Validate input\n        if (!mcLib.web3.utils.isAddress(contractAddress)) {\n            alert('Invalid ERC20 contract address');\n            throw new Error('Invalid ERC20 contract address');\n        }\n\n        // Create contract instance\n        const contract = new mcLib.web3.eth.Contract(abi, contractAddress);\n\n        // Fetch total supply\n        const totalSupply = await contract.methods.totalSupply().call();\n        const formattedTotalSupply = mcLib.web3.utils.fromWei(totalSupply, 'ether');\n\n        // Format the total supply in a human-readable format with commas\n        const humanReadableTotalSupply = new Intl.NumberFormat('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n        }).format(formattedTotalSupply);\n\n        // Fetch token name and symbol\n        const tokenName = await contract.methods.name().call();\n        const tokenSymbol = await contract.methods.symbol().call();\n\n        // Update UI with the fetched data\n        data.erc20TotalSupply = humanReadableTotalSupply;\n        data.erc20Name = tokenName;\n        data.erc20Symbol = tokenSymbol;\n\n        console.log(`Total ${tokenSymbol} Supply: ${humanReadableTotalSupply}`);\n        console.log(`${tokenSymbol} Token Name: ${tokenName}`);\n\n        return {\n            erc20TotalSupply: humanReadableTotalSupply,\n            erc20Name: tokenName,\n            erc20Symbol: tokenSymbol\n        };\n\n    } catch (error) {\n        console.error('Error fetching ERC20 data:', error.message);\n        return { error: error.message };\n    }\n}\n\nfetchERC20Data();\n"
    },
    {
      "type": "text",
      "label": "Total ERC20 Supply",
      "id": "erc20TotalSupply",
      "placement": "output"
    },
    {
      "type": "text",
      "label": "ERC20 Token Name",
      "id": "erc20Name",
      "placement": "output"
    },
    {
      "type": "text",
      "label": "ERC20 Token Symbol",
      "id": "erc20Symbol",
      "placement": "output"
    },
    {
      "type": "walletDropdown",
      "label": "Select Connected Wallet Address",
      "id": "walletAddressSelect",
      "options": [],
      "placement": "input"
    },
    {
      "type": "text",
      "label": "Or Enter Wallet Address",
      "id": "walletAddressInput",
      "placement": "input"
    },
    {
      "type": "button",
      "label": "Fetch Wallet Data",
      "id": "fetchWalletInfo",
      "placement": "action",
      "code": "async function fetchWallet() {\n    try {\n        // mcLib is injected by the framework.\n        const contractAddress = data.erc20AddressInput || mcLib.contracts.ERC20._address;\n        const userAddress = data.walletAddressInput || data.walletAddressSelect.address;\n        const abi = mcLib.contracts.ERC20.abi;\n\n        // Validate input\n        if (!mcLib.web3.utils.isAddress(contractAddress)) {\n            alert('Invalid ERC20 contract address');\n            throw new Error('Invalid ERC20 contract address');\n        }\n        if (!mcLib.web3.utils.isAddress(userAddress)) {\n            alert('Enter a valid wallet address');\n            throw new Error('Invalid wallet address');\n        }\n\n        // Create contract instance\n        const contract = new mcLib.web3.eth.Contract(abi, contractAddress);\n\n        // Fetch user's balance\n        const userBalance = await contract.methods.balanceOf(userAddress).call();\n        const formattedUserBalance = mcLib.web3.utils.fromWei(userBalance, 'ether');\n        data.erc20UserBalance = formattedUserBalance;\n\n        console.log(`${userAddress}'s ${tokenSymbol} Balance: ${formattedUserBalance}`);\n\n        return {\n            erc20UserBalance: formattedUserBalance\n        };\n\n    } catch (error) {\n        console.error('Error fetching ERC20 data:', error.message);\n        return { error: error.message };\n    }\n}\n\nfetchWallet();\n"
    },
    {
      "type": "text",
      "label": "User's ERC20 Balance",
      "id": "erc20UserBalance",
      "placement": "output"
    }
  ],
  "contracts": [
    {
      "name": "ERC20",
      "address": "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
      "template": "ERC20",
      "abi": []
    }
  ],
  "networks": [
    {
      "type": "ethereum",
      "config": {
        "rpcUrl": "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID",
        "chainId": "1",
        "exploreUrl": "https://etherscan.io"
      }
    }
  ]
}