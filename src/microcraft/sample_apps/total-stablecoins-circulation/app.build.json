{
  "name": "Total-Stablecoin-Circulation",
  "description": "Tracks total circulation for popular stablecoins or a user-provided ERC20 contract address.",
  "components": [
    {
      "type": "dropdown",
      "label": "Select Stablecoin (Optional)",
      "id": "stablecoinSelect",
      "config": {
        "optionsConfig": {
          "values": [
            "0x6B175474E89094C44Da98b954EedeAC495271d0F",
            "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
            "0x853d955aCEf822Db058eb8505911ED77F175b99e",
            "0xBF319dDC2Edc1Eb6FDf9910E39b37Be221C8805F",
            "0xdAC17F958D2ee523a2206206994597C13D831ec7",
            "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
          ]
        }
      },
      "placement": "input"
    },
    {
      "type": "text",
      "label": "Or Enter ERC20 Address (Overrides Dropdown)",
      "id": "erc20AddressInput",
      "placement": "input"
    },
    {
      "type": "button",
      "label": "Fetch Stablecoin Data",
      "id": "fetchStablecoinData",
      "placement": "action",
      "code": "async function fetchStablecoinData() {\n    try {\n        // Check if a custom ERC20 address was entered, otherwise use the dropdown selection\n        const customAddress = data.erc20AddressInput;\n        const selectedAddress = data.stablecoinSelect;\n\n        // Determine the contract address to use\n        const contractAddress = customAddress && mcLib.web3.utils.isAddress(customAddress)\n            ? customAddress\n            : selectedAddress;\n\n        if (!contractAddress || !mcLib.web3.utils.isAddress(contractAddress)) {\n            alert('Please select a valid stablecoin or enter a valid ERC20 contract address.');\n            throw new Error('Invalid stablecoin selection or contract address');\n        }\n\n        const abi = mcLib.contracts.DAI.abi;  // Assuming all stablecoins use the ERC20 ABI\n\n        // Create contract instance\n        const contract = new mcLib.web3.eth.Contract(abi, contractAddress);\n\n        // Fetch total supply, name, and symbol\n        const totalSupply = await contract.methods.totalSupply().call();\n        const formattedTotalSupply = mcLib.web3.utils.fromWei(totalSupply, 'ether');\n        const humanReadableTotalSupply = new Intl.NumberFormat('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        }).format(formattedTotalSupply);\n        \n\n        const tokenName = await contract.methods.name().call();\n        const tokenSymbol = await contract.methods.symbol().call();\n\n        // Update UI with the fetched data\n        data.erc20TotalSupply = humanReadableTotalSupply;\n        data.erc20Name = tokenName;\n        data.erc20Symbol = tokenSymbol;\n\n        console.log(`Total ${tokenSymbol} Supply: ${humanReadableTotalSupply}`);\n        console.log(`${tokenSymbol} Token Name: ${tokenName}`);\n\n        return {\n            erc20TotalSupply: humanReadableTotalSupply,\n            erc20Name: tokenName,\n            erc20Symbol: tokenSymbol\n        };\n\n    } catch (error) {\n        console.error('Error fetching stablecoin data:', error.message);\n        return { error: error.message };\n    }\n}\n\nfetchStablecoinData();\n"
    },
    {
      "type": "text",
      "label": "Total Stablecoin Supply",
      "id": "erc20TotalSupply",
      "placement": "output"
    },
    {
      "type": "text",
      "label": "Stablecoin Name",
      "id": "erc20Name",
      "placement": "output"
    },
    {
      "type": "text",
      "label": "Stablecoin Symbol",
      "id": "erc20Symbol",
      "placement": "output"
    }
  ],
  "contracts": [
    {
      "name": "DAI",
      "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
      "template": "ERC20",
      "abi": []
    },
    {
      "name": "LUSD",
      "address": "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
      "template": "ERC20",
      "abi": []
    },
    {
      "name": "FRAX",
      "address": "0x853d955aCEf822Db058eb8505911ED77F175b99e",
      "template": "ERC20",
      "abi": []
    },
    {
      "name": "CurveUSD",
      "address": "0xBF319dDC2Edc1Eb6FDf9910E39b37Be221C8805F",
      "template": "ERC20",
      "abi": []
    },
    {
      "name": "Tether",
      "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      "template": "ERC20",
      "abi": []
    },
    {
      "name": "USDC",
      "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      "template": "ERC20",
      "abi": []
    }
  ],
  "networks": [
    {
      "type": "ethereum",
      "config": {
        "rpcUrl": "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID",
        "chainId": "1",
        "exploreUrl": "https://etherscan.io"
      }
    },
    {
      "type": "polygon",
      "config": {
        "rpcUrl": "https://polygon-rpc.com",
        "chainId": "137",
        "exploreUrl": "https://polygonscan.com"
      }
    },
    {
      "type": "binance-smart-chain",
      "config": {
        "rpcUrl": "https://bsc-dataseed.binance.org",
        "chainId": "56",
        "exploreUrl": "https://bscscan.com"
      }
    },
    {
      "type": "citrea-bitcoin",
      "config": {
        "rpcUrl": "https://citrea-rpc-url.example",
        "chainId": "10001",
        "exploreUrl": "https://citrea-block-explorer.example"
      }
    },
    {
      "type": "citrus-bitcoin",
      "config": {
        "rpcUrl": "https://citrus-rpc-url.example",
        "chainId": "10002",
        "exploreUrl": "https://citrus-block-explorer.example"
      }
    }
  ]
}